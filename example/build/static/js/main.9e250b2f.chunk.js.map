{"version":3,"sources":["../../src/lib/FrameWindow.tsx","../../src/hooks.ts","../../src/lib/Transport/utils.ts","../../src/hooks/useLayersRender.tsx","../../src/lib/Transport/FrameController.ts","../../src/lib/Transport/Transport.tsx","../../src/lib/setupListeners.ts","../../src/index.tsx","App.tsx","index.tsx"],"names":["FrameWindow","useState","srcParams","setSrcParams","useEffect","props","selectedSections","excludedSections","ref","handler","setVisible","event","document","handleClickOutside","editorConfigUrl","className","styles","width","height","src","frameRef","onLoad","prev","next","handlers","onPostMessage","eventName","callback","onError","log","createHandler","window","addHandler","removeHandler","message","console","FrameController","frame","unsubscribers","setFrame","this","onInit","target","data","targetOrigin","messageData","MESSAGE_IDENTIFIER","error","sendPostMessage","addEventListener","unsubscribe","unsubscribeAll","unsubscriber","TransportContext","React","TransportContextProvider","controller","value","setupListeners","isLoaded","useContext","RENDER_EXTENSION","StickerFaceEditor","visible","setIsVisible","useRef","setIsLoaded","layers","onChange","changeLayersOnSave","classNames","size","setLoad","config","onClick","App","setLayers","showButtonSaveAvatar","onSave","ReactDOM","createRoot","getElementById","render"],"mappings":"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","file":"static/js/main.9e250b2f.chunk.js","sourcesContent":["/* eslint-disable prettier/prettier */\nimport * as React from 'react'\nimport { useEffect, useState } from 'react'\nimport { handleClickOutside } from '../hooks'\nimport styles from '../styles.module.css'\nimport { IFrameWindowProps } from '../types/Iframe'\nimport { IConfig } from '../types/Editor'\n\nconst DEFAULT_LAYERS = '1;69;159;253;250;13;160;100;3040;265;76;3000;273;3200;90;28;23;203;11;68;219;83;35;'\n\nexport const FrameWindow: React.FC<IFrameWindowProps> = React.memo(\n  (props) => {\n    const [srcParams, setSrcParams] = useState<IConfig | undefined>()\n\n    useEffect(() => {\n      if (props.config) {\n        setSrcParams({\n          selectedSections: props.config.selectedSections\n            ? `section=${props.config.selectedSections}`\n            : '',\n          excludedSections: props.config.excludedSections\n            ? '&excludedSections=' + props.config.excludedSections\n            : ''\n        })\n      }\n    }, [props.config])\n\n    const { setVisible } = props\n\n    handleClickOutside(props.frameRef, () => setVisible(false))\n\n    useEffect(() => {\n      return () => {\n        props.setLoad(false)\n      }\n    }, [])\n\n    const editorConfigUrl = `?${srcParams?.selectedSections || ''}${srcParams?.excludedSections || ''}&layers=${props?.layers || DEFAULT_LAYERS}`\n\n    return (\n      <iframe\n        className={styles.StickerFaceFrame}\n        width={props.size.width}\n        height={props.size.height}\n        src={props.src + editorConfigUrl}\n        ref={props.frameRef}\n        onLoad={() => props.setLoad(true)}\n      />\n    )\n  },\n  (prev, next) => prev.visible === next.visible\n)\n","// eslint-disable-next-line no-unused-vars\nimport { MutableRefObject, useEffect } from 'react'\n\nexport function handleClickOutside(\n  ref: MutableRefObject<any>,\n  handler: () => void\n) {\n  useEffect(() => {\n    function handleClickOutside(event: MouseEvent) {\n      if (ref.current && !ref.current.contains(event.target)) {\n        handler()\n      }\n    }\n    document.addEventListener('mousedown', (e) => handleClickOutside(e))\n\n    return () => {\n      document.removeEventListener('mousedown', (e) => handleClickOutside(e))\n    }\n  }, [ref])\n}\n","const MESSAGE_IDENTIFIER = 'STICKERFACE_SDK_MESSAGE'\n\nexport type MessageHandler = (...args: any) => any\n\nconst handlers = new Set<MessageHandler>()\n\ninterface ISendPostMessage {\n  data?: any\n  error?: string\n  target: Window\n  eventName: string\n  targetOrigin: string\n}\n\nexport function sendPostMessage(message: ISendPostMessage) {\n  const { target, eventName, data, targetOrigin = '*', error } = message\n\n  const messageData = { MESSAGE_IDENTIFIER, eventName, error, data }\n\n  target.postMessage(messageData, targetOrigin)\n\n  log(`Send: ${messageData.eventName}`)\n}\n\ninterface IMessageListener {\n  eventName: string\n  callback: MessageHandler\n  onError: MessageHandler\n}\n\nexport function onPostMessage(props: IMessageListener) {\n  const { eventName, callback, onError } = props\n\n  const handler = createHandler({ eventName, callback, onError })\n\n  addHandler(handler)\n  return () => removeHandler(handler)\n}\n\nfunction createHandler(props: IMessageListener) {\n  const { eventName, callback, onError } = props\n\n  return function handler(event: MessageEvent) {\n    if (\n      event.data.MESSAGE_IDENTIFIER !== MESSAGE_IDENTIFIER ||\n      event.data.eventName !== eventName\n    ) {\n      return\n    }\n\n    if (event.data.error !== undefined && typeof onError === 'function') {\n      return onError(event, event.data.error)\n    }\n\n    log(`Received: ${event.data.eventName};`)\n    callback(event, event.data.data)\n  }\n}\n\nfunction addHandler(handler: MessageHandler) {\n  window.addEventListener('message', handler, false)\n\n  handlers.add(handler)\n}\n\nfunction removeHandler(handler: MessageHandler) {\n  if (handlers.has(handler)) {\n    window.removeEventListener('message', handler, false)\n\n    handlers.delete(handler)\n  }\n}\n\nexport function log(message: string): void {\n  console.log(`%c ${message}`, 'color: #bada55;')\n}\n","/* eslint-disable */\nimport {useEffect, useState} from \"react\";\n\nexport enum RENDER_EXTENSION {\n  SVG = 'svg',\n  PNG = 'png',\n}\n\nexport {}\ndeclare global {\n  interface Window {\n    render: (\n      layer: string | string[],\n      reqId: number,\n      size: number,\n      callback: unknown\n    ) => undefined\n    renderSVG: (\n      layer: string | string[],\n      reqId: number,\n      size: number,\n      params: object,\n      callback: unknown\n    ) => undefined\n    renderPNG: (\n      layer: string | string[],\n      reqId: number,\n      size: number,\n      params: object,\n      callback: unknown\n    ) => undefined\n    renderCanvas: (\n      layer: string | string[],\n      size: number,\n      params: object,\n      callback: unknown\n    ) => undefined\n  }\n}\n\nconst asyncRenderImage = async (layers: string, type: RENDER_EXTENSION, noBackground: boolean, setResultRender: (blob: string) => unknown\n) => {\n  switch (type) {\n    case RENDER_EXTENSION.PNG:\n      if (typeof window.renderPNG !== 'undefined') {\n        window.renderPNG(layers, 0, 800, {}, function (blob: string) {\n          setResultRender(blob)\n        })\n      }\n      break;\n    case RENDER_EXTENSION.SVG:\n      if (typeof window.renderSVG  !== 'undefined') {\n        window.renderSVG(layers, 0, 800, {nobg: noBackground}, function (blob: string) {\n          // eslint-disable-next-line @typescript-eslint/ban-ts-comment\n          // @ts-ignore\n          setResultRender(genSvgSrc(blob))\n        })\n      }\n      break;\n  }\n}\n\nexport const useRenderLayers = (layers: string, type: RENDER_EXTENSION, noBackground: boolean): string => {\n  const [renderLayers, setRenderLayers] = useState<string>(\"\")\n\n  useEffect(function () {\n    asyncRenderImage(layers, type, noBackground, setRenderLayers)\n  }, [layers])\n\n  return renderLayers\n};\n\n\n","// eslint-disable-next-line no-unused-vars\nimport { MessageHandler, onPostMessage, sendPostMessage } from './utils'\n\ntype Unsubscribe = () => void\n\nexport class FrameController {\n  public frame: Window | null = null\n\n  public setFrame(frame: Window | null) {\n    if (frame !== null) {\n      this.frame = frame\n    }\n  }\n\n  public onInit() {\n    if (!this.frame) {\n      return\n    }\n\n    sendPostMessage({\n      data: 'Frame initialised',\n      target: this.frame,\n      eventName: 'sdk_init',\n      targetOrigin: '*'\n    })\n  }\n\n  public addEventListener(\n    eventName: string,\n    handler: MessageHandler\n  ): Unsubscribe {\n    const unsubscribe = onPostMessage({\n      eventName,\n      callback: handler,\n      onError: handler\n    })\n\n    this.unsubscribers.push(unsubscribe)\n\n    return unsubscribe\n  }\n\n  public unsubscribeAll() {\n    this.unsubscribers.forEach((unsubscriber) => {\n      unsubscriber()\n    })\n  }\n\n  private unsubscribers: Array<() => void> = []\n}\n","import React, { useContext } from 'react'\nimport { FrameController } from './FrameController'\n\nconst TransportContext = React.createContext<{ controller?: FrameController }>(\n  {}\n)\n\nexport const useTransport = () => {\n  const transport = useContext(TransportContext)\n\n  return transport\n}\n\nexport const TransportContextProvider: React.FC = (props) => {\n  const controller = React.useMemo(() => {\n    return new FrameController()\n  }, [])\n\n  return (\n    <TransportContext.Provider value={{ controller }}>\n      {props.children}\n    </TransportContext.Provider>\n  )\n}\n","// eslint-disable-next-line no-unused-vars\nimport { RefObject, useEffect } from 'react'\nimport { useTransport } from './Transport/Transport'\n\ninterface IListenerProps {\n  onInit: () => void\n  onChange: (layers: string) => void\n  isLoaded: boolean\n  frame: RefObject<HTMLIFrameElement>\n}\n\nexport const setupListeners = (props: IListenerProps) => {\n  const { frame, isLoaded } = props\n  const { controller } = useTransport()\n\n  useEffect(() => {\n    console.log(frame.current !== null && isLoaded, controller)\n\n    if (frame.current !== null && isLoaded) {\n      controller?.unsubscribeAll()\n      controller?.setFrame(frame.current.contentWindow)\n\n      controller?.addEventListener('iframe_init', props.onInit)\n      controller?.addEventListener('layers_change', props.onChange)\n\n      controller?.onInit()\n    }\n  }, [frame.current, isLoaded])\n}\n","/* eslint-disable prettier/prettier */\nimport styles from \"./styles.module.css\";\nimport * as React from \"react\";\nimport { useRef, useState } from \"react\";\nimport { IEditorProps } from \"./types/Editor\";\nimport { FrameWindow } from \"./lib/FrameWindow\";\nimport { setupListeners } from \"./lib/setupListeners\";\nimport { TransportContextProvider } from \"./lib/Transport/Transport\";\nimport classNames from \"classnames\";\nimport { RENDER_EXTENSION, useRenderLayers } from \"./hooks/useLayersRender\";\n\nconst FRAME_ORIGIN = 'https://editor.stickerface.io'\n\nconst StickerFaceEditor: React.FC<IEditorProps> = (props) => {\n  const [visible, setIsVisible] = useState<boolean>(false)\n  const frameRef = useRef<HTMLIFrameElement>(null)\n  const [isLoaded, setIsLoaded] = useState(false)\n  const [layers, onChange] = useState('')\n\n  const changeLayersOnSave = props?.showButtonSaveAvatar ? onChange : props.onChange ? props?.onChange : onChange\n\n  const handleSave = () => {\n    if (props.onSave) {\n      // @ts-ignore\n      props.onSave(layers?.data?.data)\n    }\n  }\n\n  setupListeners({\n    isLoaded,\n    onInit: props.onInit,\n    onChange: changeLayersOnSave,\n    frame: frameRef\n  })\n\n  return (\n    <div\n      className={classNames(styles.StickerFaceContainer, props.className)}\n    >\n      <FrameWindow\n        src={FRAME_ORIGIN}\n        layers={props.layers}\n        size={props.size}\n        visible={visible}\n        frameRef={frameRef}\n        setLoad={(loaded) => setIsLoaded(loaded)}\n        setVisible={(visible) => setIsVisible(visible)}\n        config={props.config}\n      />\n\n      {\n        (props?.showButtonSaveAvatar && isLoaded) && (\n          <button className={styles.StickerFaceButton} onClick={handleSave}>\n            Save Avatar\n          </button>\n        )\n      }\n    </div>\n  )\n}\n\n\ninterface IAvatarProps {\n  layers: string\n  noBackground?: boolean\n}\n\nconst StickerFaceAvatar: React.FC<IAvatarProps> = (props) => {\n  const layersSvg = useRenderLayers(props.layers, RENDER_EXTENSION.SVG, props?.noBackground || false)\n\n  return (\n    <div>\n      <img\n        src={layersSvg}\n        width=\"100%\"\n        height=\"100%\"\n        alt=\"\"\n      />\n    </div>\n  )\n}\n\nexport {\n  TransportContextProvider,\n  StickerFaceEditor,\n  StickerFaceAvatar,\n}\n","import React, { useState } from 'react'\n\nimport { StickerFaceEditor, TransportContextProvider } from 'stickerface-sdk'\nimport 'stickerface-sdk/dist/index.css'\n\nconst App = () => {\n  const [layers, setLayers] = useState<string | null>();\n  console.log(layers)\n\n  return (\n    <div className={'container'}>\n      <TransportContextProvider>\n        <StickerFaceEditor\n          layers={layers}\n          size={{\n            width: '100%',\n            height: '100%',\n          }}\n          onInit={() => {\n            console.log('On init')\n          }}\n          showButtonSaveAvatar\n          onSave={(layers) => {\n            setLayers(layers)\n          }}\n        />\n      </TransportContextProvider>\n    </div>\n  )\n}\n\nexport default App","import './index.css'\n\nimport React from 'react'\n// @ts-ignore\nimport ReactDOM from 'react-dom/client'\nimport App from './App'\n\nconst root = ReactDOM.createRoot(document.getElementById('root'))\n\nroot.render(<App />)\n"],"sourceRoot":""}